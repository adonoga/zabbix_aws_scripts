#!/usr/bin/python
import boto3
import ConfigParser
import datetime
import argparse
import requests


class Checker:
    def __init__(self, config, region, account):
        aws_key = config.get(account, "key")
        aws_secret = config.get(account, "secret")
        self.cloudwatch = boto3.client(
            'cloudwatch',
            aws_access_key_id=aws_key,
            aws_secret_access_key=aws_secret,
            region_name=region)

    def get_metric(self, interval, metric, namespace, statistic, dimension):
        if not dimension:
            instance_id = self.get_instance_id()
            dimension = {"Name": "InstanceId", "Value": instance_id}
        end_time = datetime.datetime.utcnow()
        start_time = end_time - datetime.timedelta(seconds=interval)
        result = self.cloudwatch.get_metric_statistics(Namespace=namespace, MetricName=metric, Dimensions=[dimension, ],
                                                       StartTime=start_time.isoformat(), EndTime=end_time.isoformat(),
                                                       Statistics=[statistic, ], Period=interval)
        ret_val = result["Datapoints"][0][statistic] if len(result["Datapoints"]) > 0 else -1
        if debug:
            print result
        # This is a dirty hack, because AWS API logic sucks
        if metric == "FreeStorageSpace":
            ret_val = int(ret_val)
        return ret_val


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Gets metrics from CW")
    parser.add_argument("--interval", dest='interval', help='Refresh interval', required=True, type=int)
    parser.add_argument("--metric", dest='metric', help='Name of metric', required=True)
    parser.add_argument("--namespace", dest='namespace', help='Metric namespace', required=True)
    parser.add_argument("--statistic", dest='statistic', help='Type of statistic', required=True)
    parser.add_argument("--dimension", dest='dimension', help='Dimension (instance id)', required=False)
    parser.add_argument("--region", dest='region', help='Instance region', required=False)
    parser.add_argument("--account", dest='account', help='Instance account`', required=True)
    parser.add_argument("--debug", dest='debug', help='Debug flag', required=False)
    args = parser.parse_args()
    dimension = None
    global debug
    debug = True if args.debug else False
    if args.dimension:
        # AWS requires dimension to be dict like:
        # { "Name": dimension_name, "Value" dimension_value }
        instance = args.dimension.split("=")
        dimension = dict(zip(("Name", "Value"), instance))

    config = ConfigParser.ConfigParser()
    config.readfp(open("/usr/lib/zabbix/scripts/conf/aws.conf"))
    region = args.region if args.region else None
    checker = Checker(config, region, args.account)

    print checker.get_metric(interval=args.interval,
                             metric=args.metric,
                             namespace=args.namespace,
                             statistic=args.statistic,
                             dimension=dimension)
